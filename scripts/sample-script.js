// We require the Hardhat Runtime Environment explicitly here. This is optional 
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
const hre = require("hardhat");

async function main() {
  // Hardhat always runs the compile task when running scripts with its command
  // line interface.
  //
  // If this script is run directly using `node` you may want to call compile 
  // manually to make sure everything is compiled
  // await hre.run('compile');

  // We get the contract to deploy
  const Greeter = await hre.ethers.getContractFactory("Verifier");
  const greeter = await Greeter.deploy();

  await greeter.deployed();

  const res = await greeter.verifyMultiblockProof(
      ["110221920242839969165721840064397771590823549745578986228596109109594027281"],
      [
          "9281433207486449053440764528488420642771119522892671537984621965871930237390",
          "1811429247673126415715858778050049461877948509733596338910844042733437548791",
          "14309652093646371736582189975409011658465520037624297537813008200803153992468",
          "18353181948672358257719101655521966381579522646224378778690513252895778947092",
          "10779282519449711258736201720179854781601705159432800202725763313150841618749",
          "5727211823731647163445046329742271864712519532761040609821823651520189228282",
          "12237403458790335056287992403383723439397374527468564370141711520545234043159",
          "18526990050308328035103624238884397987915415658328954340100774701925551202392",
          "19454142707947466960109577010599521099529845600468135212048581697079576815286",
          "16618849988654336375581052060689603564686192690686507325243910413945809019898",
          "13758060834247493253947704839757402674296028332329788709819078512927510946077",
          "19454320614576441040564378777498346728546922420684448103339343321611598903921",
          "14470805718756744111545498285571628278678584900170935274097514005383298442579",
          "16520865706230824809473719239131405488849557967989551965775200284098012279623",
          "1781315055493121646689390615670259371961602169541347078135666612253894269215",
          "9933206680927066442719479411689937423838999409518238935020196176813664894500",
          "17773794551458878484150012573563175855861856972320927257440806003252678874052",
          "280687687791000083105786446678440002359326643200832135061316557995090680364",
          "18496318728657361829040221553198205286344948295135867818763393205949527066800",
          "4678304769675053375821839800965087454607300281909892951792532023434899927260",
          "9850364294063169749673370212698675111037389224999307645625722442457505649786",
          "14282827722383024221862682706046414696096133867413924479123487658450011575403",
          "4517718900852413531800986908884309954287637596163786506958589926238224969016",
          "6998852517219753333780199482545479028446481211565040973343965759112776501831",
          "18438946778124042799281986814302746673916036380326147474544834800495096242488",
          "3752998930730636729039460521229022123888921244149514438184710853850801227937",
          "10251666886602088317635559256619631688076773734485978679394857771790573981681",
          "115156086152047134280966748719374554165832359697344798748156725050141328346",
          "1533094162640906598708460669401761380943001288177178553029116146369502913556",
          "3971702953950384547107643855569288110650024664295591969570939071379767275319",
          "1341737728166869680221771227069773119713061270056459042635140838481563954105",
          "17182835464585561620558692293913151352403408813566959068175273146637386261240",
          "16607940055589181386582005030401491027582683991864768350050426306458832852654",
          "3490299514007541117019683634726854493307302839234934798548019210062573877751",
      ],
      [630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,630],
      [
          "0x10f6fbfb8c17f753821e731533647286b54b33a444ef096784ac9d1a890461b9",
              "0x1c2dff692d825d9718bb606baa523e88c42c7bf6adbd2e968afbffd87bd60864",
              "0xca4a2c5cda2c12572d22887adbeef699bcd1fa4a70b865494abfe2140fd2c89",
              "0x1b6740c59c1164291e26fe5c30ef87fcc353bf538434e29b6b5d2917caed758b",
              "0x2c253accddf91ea136828c0e1e0f2aab4441a074b1669b39df3baee5b8a281e",
              "0x15664ea6b351e2b0fd5755aa742f45650641f8de8095d53356b2153d2d9824a9",
              "0x3216796c5f740029a19ba4b131af778b09b0cf0253d1602cd82c3a1cea64590",
              "0x17fb77feac77dc907944e52e29509d38799d9cd77a8de3b218054d68301887bc",
              "0xeb36c0a3c1df350d1e6aec645d049a6f2cd849905f333ab7c1f1c993c316e81",
              "0x14f5b4c4538667c831ca1adab26bdfe7c2d6dd41dea7cc313d5c31d2a3be372c",
              "0x19b6718a14dceaf5c0b4b31179b0eca66d216f2a094b862742809ce98471e806",
              "0x1624cb1073ccb87670ed944a50a5ed4817f4fc1c6b72b5128ac1c44566ccd4c3",
              "0xe725662f794f2c1d49845c6acae6e3e78809f58bef414909ad3e2c28d7e6315",
              "0xc22f4a8b20c75121e7197317bf8c551124fa7fe1f3b973bd6a9b6f71d797444",
              "0xbd54e2e576d62b3647f168d1fa83eb376291e79ec61a57faeda376009861e13",
              "0x12aa0eca8da22508f04a50f2e532b389ae9e3ee50fd8bded9b9240f4b2f86bc3",
              "0x13990150545d8fb248fc5e733affe9e1285c84fcf2fe827687309f4d62448a2e",
              "0x1feac0a22f4803a6de8ab808a583730a1ffc51ca33b9fc3d97d9413993e90df9",
              "0xf8082ae133b8ff1e0ebce126d200d3e0ae0e08458067072dbc3ccf563a7c828",
              "0x1c54ccc2f24da95e09980857618a23680f43ac7bf83affc82af41c198d39abb1"
      ],
      [
          "216380046388182008087",
          "160367399590164436077",
          "130705500313850240382",
          "606030748195932",
          "183703658066603715490",
          "286473188441086010280",
          "270846080634583629864",
          "840902636066425",
          "199543097021982875977",
          "287143958594195651044",
          "126039612649642840423",
          "530425206398320",
          "74844961509169197166",
          "68668669773649455285",
          "194138017001295104655",
          "423404207681542",
      ]
  );

  console.log(res);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
